pragma solidity ^0.4.14;

contract Payroll {
    struct Employee {
        address id;
        uint salary;
        uint lastPayday;
    }
    
    uint constant payDuration = 10 seconds;

    address owner;
    Employee[] employees;

    function Payroll() {
        owner = msg.sender;
    }
    
    function _partialPaid(Employee employee) private {
        uint payment = employee.salary *(now - employee.lastPayday) / payDuration; //how much balance need pay
        employee.id.transfer(payment);
    }
    
    function _findEmployee(address employeeId) private returns (Employee, uint) {
        for(uint i = 0; i < employees.length; i++){
            if(employees[i].id == employeeId){
                return (employees[i], i);
            }
        }
    }

    function addEmployee(address employeeId, uint salary) {
        require(msg.sender == owner);
        var (employee, index) = _findEmployee(employeeId);
        assert(employee.id == 0x0);
        employees.push(Employee(employeeId,salary * 1 ether,now));
    }
    
    function removeEmployee(address employeeId){
        require(msg.sender == owner);
        var (employee, index) = _findEmployee(employeeId);
        assert(employee.id != 0x0);
        _partialPaid(employee);
        delete employees[index]; // "delete employees" drop total array
        employees[index] = employees[employees.length -1];
        employees.length -= 1;
    }
    
    function updateEmployee(address employeeId, uint salary) {
        require (msg.sender == owner);
        var (employee, index) = _findEmployee(employeeId);
        assert(employee.id != 0x0);
        _partialPaid(employee);
        employees[index].salary = salary * 1 ether;
        employees[index].lastPayday = now;
    }
    
    function addFund() payable returns (uint) {
        return this.balance;
    }
    
    function calculateRunway() returns (uint) {
       uint totalSalary = 0;
       for (uint i = 0; i < employees.length; i++) {
            totalSalary += employees[i].salary;
        }
        return this.balance / totalSalary;
    }
    
    function hasEnoughFund() returns (bool) {
        return calculateRunway() > 0;
    }
    
    function getPaid() {
        var (employee, index) = _findEmployee(msg.sender);
        assert(employee.id != 0x0);
        
        uint nextPayDay = employee.lastPayday + payDuration;
        assert(nextPayDay < now);
        
        employees[index].lastPayday = nextPayDay;
        employee.id.transfer(employee.salary);
    }
}
transaction Gas 消耗
22971
23759
24547
25335
26123
26911
27699
28487
29275
30063
Gas 消耗从第一次开始陆续消耗增加;原始是 calculateRunway 中的for循环部分随着地址的增加,需要遍历的次数在增加;

更新代码如下:
pragma solidity ^0.4.14;

contract Payroll {
    
    struct Employee{
        address id;
        uint salary;
        uint lastPayday;
    }
    
    Employee[] employees;
    uint totalSalary;
    
    uint constant payDuration = 10 seconds;
    address owner;
    
    function Payroll(){
        owner = msg.sender;
        totalSalary = 0;
    }
    
    function _partialPaid(Employee employee) private{
        uint payment = employee.salary * (now - employee.lastPayday) / payDuration;
        employee.id.transfer(payment);
    }
    
    function _findEmpolyee(address employeeId) private returns (Employee,uint) {
        for (uint i=0; i <employees.length;i++){
            if (employees[i].id == employeeId){
                return (employees[i],i);
            }
        }
    }
    
    function addEmployee(address employeeId, uint salary){
        require(msg.sender==owner);
        var(employee, index) = _findEmpolyee(employeeId);
        assert(employee.id==0x0);
        
        employees.push(Employee(employeeId,salary* 1 ether,now));
        totalSalary += salary* 1 ether;
    }
    
    function removeEmployee(address employeeId){
        require(msg.sender==owner);
        var(employee, index) = _findEmpolyee(employeeId);
        assert(employee.id!=0x0);
        
        _partialPaid(employee);
        totalSalary -= employees[index].salary* 1 ether;
        
        delete employees[index];
        employees[index]=employees[employees.length-1];
        employees.length-=1;
        
        return;
        
    }

    function updateEmployee(address employeeId, uint salary) {
        require(msg.sender == owner);
        var(employee, index) = _findEmpolyee(employeeId);
        assert(employee.id!=0x0);
        
        _partialPaid(employee);
        totalSalary += (salary-employees[index].salary) * 1 ether;
         
        employees[index].salary = salary * 1 ether;
        employees[index].lastPayday=now;
        return;
        
    }
    
    function addFund() payable returns (uint) {
        return this.balance;
    }
    
    function calculateRunway() returns (uint) {
        return this.balance/totalSalary;
    }
    
    function hasEnoughFund() returns (bool) {
        return calculateRunway() > 0;
    }
    
    function getPaid() {
        var (employee,index) = _findEmpolyee(msg.sender);
        assert(employee.id!=0x0);
        
        uint nextPayday = employee.lastPayday + payDuration;
        assert(nextPayday < now);

        employee.lastPayday = nextPayday;
        employee.id.transfer(employee.salary);
    }
}

将calcalateRunway 中的循环语句计算结果,放在其他 function 中去计算, calculateRunway 的 transaction cost 固定为22122.不在变化.
