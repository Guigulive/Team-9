pragma solidity ^0.4.14;

contract payRollHomework {
    uint constant payDuration = 10 seconds;

    address owner;     //the employer's address
       uint salary;    // employee's salary
    address employee;  //employee's address
       uint lastPayday;//the last date of payment

    // constructor,once deploy, set owner as as the owner of contract
    function payRollHomework() {
        owner = msg.sender;
        salary = 1;
    }
    
    //udpate the address and salary to the other employee
    function updateEmployee(address e, uint s) {
        require(msg.sender == owner);
        //all of empty addres start by 0x0
        if(employee != 0x0) {
            uint payment = salary * (now - lastPayday) / payDuration;
            employee.transfer(payment);
        }
        
        employee = e;          //update employee's address
        salary = s * 1 ether;  //update the salary
        lastPayday = now;      //update the last day to pay salary
    }
    
    //add function to change address
    function updateAddress(address addr){
        require(msg.sender == owner);
        
        if(employee != 0x0){
        employee = addr;    
        }
    }
    
    //add function to change salary
    function updateSalary(uint sal){
        require(msg.sender == owner);
        salary = sal * 1 ether;
    }
    
    //increase eth to smartcontract
    function addFund() payable returns (uint){
        return this.balance;
    }
    //check the balance
    function calculateRunway() returns (uint) {
        return this.balance / salary;
    }
    //check whether enough balance
    function hasEnoughFund() returns (bool) {
        return calculateRunway() > 0;
    }
    //pay eth to employee
    function getPaid() returns(uint){
        //if(msg.sender != employee){
        //    revert();
        //}
        require(msg.sender == employee);  //same as if(msg.sender) != owner) {throw;}
        
        uint nextPayday = lastPayday +payDuration;
        require(nextPayday < now); //changed from assert,due to assert would use all gas
        
        lastPayday = nextPayday;
        employee.transfer(salary);
    }
    
    //search the balance of the address,uint256 is the normal method,which mean 2^256
    function getBalance(address addr) public returns (uint256){
        return addr.balance;
    }
}
